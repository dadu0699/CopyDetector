/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,7],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[2,8,11],$V8=[6,14,81,83],$V9=[1,31],$Va=[1,32],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[14,18,24,25,26,27,28],$Vh=[10,29],$Vi=[2,52],$Vj=[1,52],$Vk=[1,59],$Vl=[1,66],$Vm=[1,63],$Vn=[1,64],$Vo=[1,65],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,74],$Vv=[1,76],$Vw=[1,78],$Vx=[20,29],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[10,20,29,51,52,53,54,55,56,57,58,59,60,61,62,63,64,82],$VN=[1,99],$VO=[1,115],$VP=[1,117],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[1,121],$VU=[1,122],$VV=[1,123],$VW=[1,124],$VX=[1,125],$VY=[1,126],$VZ=[1,127],$V_=[2,9,14,18,24,25,26,27,28,72,73,75,76,77,81,83,84,86,87,88,89,90],$V$=[2,9,14,24,25,26,27,28,72,73,75,77,81,83,84,86,87,88,89,90],$V01=[1,157],$V11=[1,161],$V21=[10,20,29,51,52,57,58,59,60,61,62,63,64,82],$V31=[10,20,29,51,52,53,54,56,57,58,59,60,61,62,63,64,82],$V41=[10,20,29,57,58,59,60,61,62,63,64,82],$V51=[10,20,29,61,62,63,64,82],$V61=[10,12],$V71=[1,199],$V81=[1,198],$V91=[14,81,83],$Va1=[1,231];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"IMPORTS":4,"CLASS":5,"EOF":6,"IMPORT":7,"import":8,"identifier":9,";":10,"class":11,"{":12,"BODYCLASS":13,"}":14,"ERROR":15,"METHOD":16,"DECLARATION":17,"void":18,"(":19,")":20,"BODY":21,"TYPE":22,"PARAMS":23,"int":24,"double":25,"boolean":26,"char":27,"String":28,",":29,"PARAM":30,"SENTENCES":31,"SENTENCE":32,"ASSIGNMENT":33,"INVOKEMETHOD":34,"SOUT":35,"IF":36,"SWITCH":37,"FOR":38,"WHILE":39,"DOWHILE":40,"RETURN":41,"BREAK":42,"CONTINUE":43,"IDLIST":44,"ID":45,"ASSIGNMENT_EXPRESSION":46,"++":47,"--":48,"=":49,"EXPRESSION":50,"+":51,"-":52,"*":53,"/":54,"^":55,"%":56,"<":57,">":58,"<=":59,">=":60,"==":61,"!=":62,"||":63,"&&":64,"!":65,"stringLiteral":66,"character":67,"decimal":68,"true":69,"false":70,"INVOKEMETHODPARAMS":71,"print":72,"println":73,"CONDITION":74,"if":75,"else":76,"switch":77,"CASES":78,"DEFAULT":79,"CASE":80,"case":81,":":82,"default":83,"for":84,"ITERATOR":85,"while":86,"do":87,"return":88,"break":89,"continue":90,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"import",9:"identifier",10:";",11:"class",12:"{",14:"}",18:"void",19:"(",20:")",24:"int",25:"double",26:"boolean",27:"char",28:"String",29:",",47:"++",48:"--",49:"=",51:"+",52:"-",53:"*",54:"/",55:"^",56:"%",57:"<",58:">",59:"<=",60:">=",61:"==",62:"!=",63:"||",64:"&&",65:"!",66:"stringLiteral",67:"character",68:"decimal",69:"true",70:"false",72:"print",73:"println",75:"if",76:"else",77:"switch",81:"case",82:":",83:"default",84:"for",86:"while",87:"do",88:"return",89:"break",90:"continue"},
productions_: [0,[3,3],[3,2],[3,1],[3,1],[4,2],[4,1],[7,3],[7,2],[5,5],[5,4],[5,5],[5,4],[5,2],[13,2],[13,2],[13,1],[13,1],[13,1],[16,5],[16,5],[16,6],[16,6],[22,1],[22,1],[22,1],[22,1],[22,1],[23,3],[23,1],[30,2],[30,1],[21,2],[21,3],[31,2],[31,1],[32,1],[32,1],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[17,3],[44,3],[44,1],[45,1],[45,2],[33,3],[33,3],[33,3],[46,2],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,2],[50,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[34,3],[34,4],[71,3],[71,1],[35,4],[35,4],[35,3],[35,3],[74,3],[74,1],[36,3],[36,5],[36,5],[37,6],[37,5],[37,5],[37,4],[37,6],[78,2],[78,1],[80,3],[80,4],[80,3],[79,2],[79,3],[79,2],[38,11],[38,10],[38,5],[85,2],[85,2],[39,3],[40,5],[41,2],[41,3],[42,2],[43,2],[15,1],[15,1],[15,1],[15,1],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 if (errorList.length > 0) { let eL = []; eL = eL.concat(errorList); errorList = []; idError = 0; return { 'error': eL }; } return { 'imports': $$[$0-2], 'class': $$[$0-1] } 
break;
case 2:
 if (errorList.length > 0) { let eL = []; eL = eL.concat(errorList); errorList = []; idError = 0; return { 'error': eL }; } return { 'class': $$[$0-1] } 
break;
case 4: case 8: case 11: case 12: case 13: case 18: case 31: case 48: case 91: case 99: case 104: case 107: case 110:
 errorList.push(new Error(idError, 'Syntactic error', this._$.first_line, this._$.first_column, yytext)); console.error('Syntactic error: ' + yytext + ' in the line ' + this._$.first_line + ' and column ' + this._$.first_column); idError++; 
break;
case 5: case 14: case 15: case 34: case 100:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6: case 16: case 17: case 29: case 35: case 51: case 85: case 101:
 this.$ = [$$[$0]]; 
break;
case 7:
 this.$ = { 'import': $$[$0-1] }; 
break;
case 9:
 this.$ = { 'class_name': $$[$0-3], 'class_content': $$[$0-1] }; 
break;
case 10:
 this.$ = { 'class_name': $$[$0-2], 'class_content': [] }; 
break;
case 19:
 this.$ = {'method_name': $$[$0-3], 'type': $$[$0-4], 'method_params': [], 'method_content': $$[$0] }; if(returnSentence && returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Unexpected return value')); console.error('Syntactic error: Unexpected return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter>0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 20:
 this.$ = {'method_name': $$[$0-3], 'type': $$[$0-4], 'method_params': [], 'method_content': $$[$0] }; if(returnSentence && !returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Missing return value')); console.error('Syntactic error: Missing return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter> 0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 21:
 this.$ = {'method_name': $$[$0-4], 'type': $$[$0-5], 'method_params': $$[$0-2], 'method_content': $$[$0] }; if(returnSentence && returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Unexpected return value')); console.error('Syntactic error: Unexpected return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter>0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 22:
 this.$ = {'method_name': $$[$0-4], 'type': $$[$0-5], 'method_params': $$[$0-2], 'method_content': $$[$0] }; if(returnSentence && !returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Missing return value')); console.error('Syntactic error: Missing return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter>0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 23:
 this.$ = 'int'; 
break;
case 24:
 this.$ = 'double'; 
break;
case 25:
 this.$ = 'boolean'; 
break;
case 26:
 this.$ = 'char'; 
break;
case 27:
 this.$ = 'String'; 
break;
case 28: case 50: case 84:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 30:
 this.$ = { 'type': $$[$0-1], 'identifier' : $$[$0] }; 
break;
case 32:
 this.$ = []; 
break;
case 33: case 90:
 this.$ = $$[$0-1]; 
break;
case 36:
 this.$ = { 'declaration' : $$[$0] }; 
break;
case 37:
 this.$ = { 'assignment' : $$[$0] }; 
break;
case 38:
 this.$ = { 'method_invocation' : $$[$0-1] }; 
break;
case 39: case 40: case 57: case 75: case 76: case 77: case 78: case 79: case 80: case 81:
 this.$ = $$[$0]; 
break;
case 41:
 this.$ = { 'switch' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 42:
 this.$ = { 'for' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 43:
 this.$ = { 'while' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 44:
 this.$ = { 'do' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 45:
 this.$ = { 'return' : $$[$0] }; 
break;
case 46:
 this.$ = 'break'; 
break;
case 47:
 this.$ = 'continue'; 
break;
case 49:
 this.$ = { 'type' : $$[$0-2], identifiers: $$[$0-1] }; 
break;
case 52:
 this.$ = {'identifier': $$[$0] }; 
break;
case 53:
 this.$ = {'identifier': $$[$0-1], 'value' : $$[$0] }; 
break;
case 54:
 this.$ = {'identifier': $$[$0-2], 'value' : $$[$0-1] }; 
break;
case 55:
 this.$ = {'identifier': $$[$0-2], 'value' : $$[$0-2] + ' + 1' }; 
break;
case 56:
 this.$ = {'identifier': $$[$0-2], 'value' : $$[$0-2] + ' - 1' }; 
break;
case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 73: case 74:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 82:
 this.$ = { 'method_identifier' : $$[$0-2], 'params' : [] }; 
break;
case 83:
 this.$ = { 'method_identifier' : $$[$0-3], 'params' : $$[$0-1] }; 
break;
case 86:
 this.$ = { 'print' : [] }; 
break;
case 87:
 this.$ = { 'println' : [] }; 
break;
case 88:
 this.$ = { 'print' : $$[$0-1] }; 
break;
case 89:
 this.$ = { 'println' : $$[$0-1] }; 
break;
case 92:
 this.$ = { 'if' : { 'condition' : $$[$0-1], 'sentences' : $$[$0] } }; 
break;
case 93: case 94:
 this.$ = { 'if' : { 'condition' : $$[$0-3], 'sentences' : $$[$0-2] }, 'else': $$[$0] }; 
break;
case 95:
 this.$ = { 'condition' : $$[$0-4], 'case_sentences' : $$[$0-2], 'default': $$[$0-1] }; 
break;
case 96:
 this.$ = { 'condition' : $$[$0-3], 'case_sentences' : $$[$0-1] }; 
break;
case 97:
 this.$ = { 'condition' : $$[$0-3], 'default' : $$[$0-1] }; 
break;
case 98:
 this.$ = { 'condition' : $$[$0-2] }; 
break;
case 102:
 this.$ = { 'expression' : $$[$0-1], 'sentences' : [] }; 
break;
case 103:
 this.$ = { 'expression' : $$[$0-2], 'sentences' : $$[$0] }; 
break;
case 105:
 this.$ = { 'sentences' : [] }; 
break;
case 106:
 this.$ = { 'sentences' : $$[$0] }; 
break;
case 108:
 this.$ = { 'initializer' : { 'type' : $$[$0-8], identifier: $$[$0-7], 'value' : $$[$0-6] }, 'condition' : $$[$0-4], 'iterator' : $$[$0-2], 'sentences' : $$[$0] }; 
break;
case 109:
 this.$ = { 'initializer' : { identifier: $$[$0-7], 'value' : $$[$0-6] }, 'condition' : $$[$0-4], 'iterator' : $$[$0-3], 'sentences' : $$[$0] }; 
break;
case 111:
 this.$ = {'identifier': $$[$0-1], 'value' : $$[$0-1] + ' + 1' }; 
break;
case 112:
 this.$ = {'identifier': $$[$0-1], 'value' : $$[$0-1] + ' - 1' }; 
break;
case 113:
 this.$ = { 'condition' : $$[$0-1], 'sentences' : $$[$0] }; 
break;
case 114:
 this.$ = { 'sentences' : $$[$0-3], 'while' : $$[$0-1] }; 
break;
case 115:
 this.$ = ''; returnExpression = false; returnSentence = true; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
case 116:
 this.$ = $$[$0-1]; returnExpression = true; returnSentence = true; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
case 117:
 breakCounter++; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
case 118:
 continueCounter++; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
}
},
table: [{2:[1,5],3:1,4:2,5:3,6:[1,4],7:6,8:$V0,11:$V1},{1:[3]},{2:[1,11],5:9,7:10,8:$V0,11:$V1},{6:[1,12]},{1:[2,3]},{1:[2,4],12:$V2,14:$V3,15:13,19:$V4,20:$V5,82:$V6},o($V7,[2,6]),{2:[1,20],9:[1,19]},{2:[1,22],9:[1,21]},{6:[1,23]},o($V7,[2,5]),{12:$V2,14:$V3,15:13,19:$V4,20:$V5,82:$V6},{1:[2,2]},{6:[2,13]},o($V8,[2,119]),o($V8,[2,120]),o($V8,[2,121]),o($V8,[2,122]),o($V8,[2,123]),{12:[1,24]},{12:[1,25]},{10:[1,26]},o($V7,[2,8]),{1:[2,1]},{2:$V9,13:27,14:[1,28],16:29,17:30,18:$Va,22:33,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf},{2:$V9,13:39,14:[1,40],16:29,17:30,18:$Va,22:33,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf},o($V7,[2,7]),{14:[1,41],16:42,17:43,18:$Va,22:33,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf},{6:[2,10]},o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),{9:[1,44]},{9:[1,45],44:46,45:47},{9:[2,23]},{9:[2,24]},{9:[2,25]},{9:[2,26]},{9:[2,27]},{14:[1,48],16:42,17:43,18:$Va,22:33,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf},{6:[2,12]},{6:[2,9]},o($Vg,[2,14]),o($Vg,[2,15]),{19:[1,49]},o($Vh,$Vi,{46:51,19:[1,50],49:$Vj}),{10:[1,53],29:[1,54]},o($Vh,[2,51]),{6:[2,11]},{2:$Vk,20:[1,55],22:58,23:56,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,30:57},{2:$Vk,20:[1,60],22:58,23:61,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,30:57},o($Vh,[2,53]),{9:$Vl,19:$Vm,34:72,50:62,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o([2,9,14,18,24,25,26,27,28,72,73,75,77,81,83,84,86,87,88,89,90],[2,49]),{9:$Vu,45:73},{12:$Vv,21:75},{20:[1,77],29:$Vw},o($Vx,[2,29]),{9:[1,79]},o($Vx,[2,31]),{12:$Vv,21:80},{20:[1,81],29:$Vw},o($Vh,[2,57],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL}),{9:$Vl,19:$Vm,34:72,50:96,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:97,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:98,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($VM,[2,75],{19:$VN}),o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,78]),o($VM,[2,79]),o($VM,[2,80]),o($VM,[2,81]),o($Vh,[2,50]),o($Vh,$Vi,{46:51,49:$Vj}),o($Vg,[2,19]),{2:$VO,9:$VP,14:[1,100],17:103,22:116,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,31:101,32:102,33:104,34:105,35:106,36:107,37:108,38:109,39:110,40:111,41:112,42:113,43:114,72:$VQ,73:$VR,75:$VS,77:$VT,84:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ},{12:$Vv,21:128},{2:$Vk,22:58,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,30:129},o($Vx,[2,30]),o($Vg,[2,20]),{12:$Vv,21:130},{9:$Vl,19:$Vm,34:72,50:131,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:132,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:133,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:134,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:135,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:136,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:137,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:138,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:139,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:140,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:141,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:142,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:143,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{9:$Vl,19:$Vm,34:72,50:144,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{20:[1,145],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},o($VM,[2,73]),o($VM,[2,74]),{9:$Vl,19:$Vm,20:[1,146],34:72,50:148,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:147},o($V_,[2,32]),{2:$VO,9:$VP,14:[1,149],17:103,22:116,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,32:150,33:104,34:105,35:106,36:107,37:108,38:109,39:110,40:111,41:112,42:113,43:114,72:$VQ,73:$VR,75:$VS,77:$VT,84:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ},o($V$,[2,35]),o($V$,[2,36]),o($V$,[2,37]),{10:[1,151]},o($V$,[2,39]),o($V$,[2,40]),o($V$,[2,41]),o($V$,[2,42]),o($V$,[2,43]),o($V$,[2,44]),o($V$,[2,45]),o($V$,[2,46]),o($V$,[2,47]),o($V$,[2,48]),{9:$Vu,44:46,45:47},{19:$VN,46:152,47:[1,153],48:[1,154],49:$Vj},{2:$V01,19:[1,155],74:156},{2:$V01,19:[1,158],74:159},{2:$V01,19:$V11,74:160},{2:$V01,19:$V11,74:162},{19:[1,163]},{2:$V01,19:$V11,74:164},{12:$Vv,21:165},{9:$Vl,10:[1,166],19:$Vm,34:72,50:167,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{10:[1,168]},{10:[1,169]},o($Vg,[2,21]),o($Vx,[2,28]),o($Vg,[2,22]),o($V21,[2,58],{53:$VA,54:$VB,55:$VC,56:$VD}),o($V21,[2,59],{53:$VA,54:$VB,55:$VC,56:$VD}),o($V31,[2,60],{55:$VC}),o($V31,[2,61],{55:$VC}),o($VM,[2,62]),o($V31,[2,63],{55:$VC}),o($V41,[2,64],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($V41,[2,65],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($V41,[2,66],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($V41,[2,67],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($V51,[2,68],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o($V51,[2,69],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH}),o([10,20,29,63,82],[2,70],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,64:$VL}),o([10,20,29,63,64,82],[2,71],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ}),o($VM,[2,72]),o($VM,[2,82]),{20:[1,170],29:[1,171]},o($Vx,[2,85],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL}),o($V_,[2,33]),o($V$,[2,34]),o($V$,[2,38]),{10:[1,172]},{10:[1,173]},{10:[1,174]},{9:$Vl,19:$Vm,20:[1,175],34:72,50:176,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{10:[1,177]},o($V61,[2,91]),{9:$Vl,19:$Vm,20:[1,178],34:72,50:176,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{10:[1,179]},{12:$Vv,21:180},{9:$Vl,19:$Vm,34:72,50:176,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{12:[1,181]},{2:[1,184],9:[1,183],22:182,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf},{12:$Vv,21:185},{86:[1,186]},o($V$,[2,115]),{10:[1,187],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},o($V$,[2,117]),o($V$,[2,118]),o($VM,[2,83]),{9:$Vl,19:$Vm,34:72,50:188,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($V$,[2,54]),o($V$,[2,55]),o($V$,[2,56]),{10:[1,189]},{20:[1,190],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},o($V$,[2,88]),{10:[1,191]},o($V$,[2,89]),o($V$,[2,92],{76:[1,192]}),{2:[1,196],14:[1,195],78:193,79:194,80:197,81:$V71,83:$V81},{9:[1,200]},{46:201,49:$Vj},{20:[1,202]},o($V$,[2,113]),{2:$V01,19:$V11,74:203},o($V$,[2,116]),o($Vx,[2,84],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL}),o($V$,[2,86]),o($V61,[2,90]),o($V$,[2,87]),{12:$Vv,21:205,36:204,75:$VS},{14:[1,207],79:206,80:208,81:$V71,83:$V81},{14:[1,209]},o($V$,[2,98]),{12:$V2,14:$V3,15:210,19:$V4,20:$V5,82:$V6},o($V91,[2,101]),{2:[1,212],82:[1,211]},{2:[1,214],9:$Vl,19:$Vm,34:72,50:213,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{46:215,49:$Vj},{10:[1,216]},{12:$Vv,21:217},{10:[1,218]},o($V$,[2,93]),o($V$,[2,94]),{14:[1,219]},o($V$,[2,96]),o($V91,[2,100]),o($V$,[2,97]),{14:[1,220]},{2:$VO,9:$VP,14:[2,105],17:103,22:116,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,31:221,32:102,33:104,34:105,35:106,36:107,37:108,38:109,39:110,40:111,41:112,42:113,43:114,72:$VQ,73:$VR,75:$VS,77:$VT,84:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ},{14:[2,107]},{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL,82:[1,222]},{12:$V2,14:$V3,15:223,19:$V4,20:$V5,82:$V6},{10:[1,224]},{9:$Vl,19:$Vm,34:72,50:225,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},o($V$,[2,110]),o($V$,[2,114]),o($V$,[2,95]),o($V$,[2,99]),{2:$VO,9:$VP,14:[2,106],17:103,22:116,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,32:150,33:104,34:105,35:106,36:107,37:108,38:109,39:110,40:111,41:112,42:113,43:114,72:$VQ,73:$VR,75:$VS,77:$VT,84:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ},o($V91,[2,102],{32:102,17:103,33:104,34:105,35:106,36:107,37:108,38:109,39:110,40:111,41:112,42:113,43:114,22:116,31:226,2:$VO,9:$VP,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,72:$VQ,73:$VR,75:$VS,77:$VT,84:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ}),o($V91,[2,104]),{9:$Vl,19:$Vm,34:72,50:227,52:$Vn,65:$Vo,66:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt},{10:[1,228],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},o($V91,[2,103],{17:103,33:104,34:105,35:106,36:107,37:108,38:109,39:110,40:111,41:112,42:113,43:114,22:116,32:150,2:$VO,9:$VP,24:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,72:$VQ,73:$VR,75:$VS,77:$VT,84:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ}),{10:[1,229],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{9:$Va1,85:230},{9:$Va1,85:232},{20:[1,233]},{47:[1,234],48:[1,235]},{20:[1,236]},{12:$Vv,21:237},{20:[2,111]},{20:[2,112]},{12:$Vv,21:238},o($V$,[2,109]),o($V$,[2,108])],
defaultActions: {4:[2,3],12:[2,2],13:[2,13],23:[2,1],28:[2,10],34:[2,23],35:[2,24],36:[2,25],37:[2,26],38:[2,27],40:[2,12],41:[2,9],48:[2,11],212:[2,107],234:[2,111],235:[2,112]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Error } = require('../models/Error');

    var idError = 1;
    var errorLine = 0;
    var errorcolumn = 0;
    var errorList = [];

    var returnExpression = false;
    var returnSentence = false;

    var breakCounter = 0;
    var continueCounter = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip Single Line Comment AND Multiline Comment */
break;
case 2:return 12
break;
case 3:return 14
break;
case 4:return 19
break;
case 5:return 20
break;
case 6:return 29
break;
case 7:return '.'
break;
case 8:return 82
break;
case 9:return 10
break;
case 10:return 26
break;
case 11:return 89
break;
case 12:return 81
break;
case 13:return 27
break;
case 14:return 11
break;
case 15:return 90
break;
case 16:return 83
break;
case 17:return 87
break;
case 18:return 25
break;
case 19:return 76
break;
case 20:return 70
break;
case 21:return 84
break;
case 22:return 75
break;
case 23:return 8
break;
case 24:return 24
break;
case 25:return 'out'
break;
case 26:return 72
break;
case 27:return 73
break;
case 28:return 88
break;
case 29:return 28
break;
case 30:return 77
break;
case 31:return 'System'
break;
case 32:return 69
break;
case 33:return 18
break;
case 34:return 86
break;
case 35:return 59
break;
case 36:return 57
break;
case 37:return 61
break;
case 38:return 60
break;
case 39:return 58
break;
case 40:return 62
break;
case 41:return 63
break;
case 42:return 64
break;
case 43:return 65
break;
case 44:return 49
break;
case 45:return 47
break;
case 46:return 51
break;
case 47:return 48
break;
case 48:return 52
break;
case 49:return 53
break;
case 50:return 54
break;
case 51:return 55
break;
case 52:return 56
break;
case 53:return 9
break;
case 54:return 68
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 57:return 6;
break;
case 58: errorList.push(new Error(idError, 'Lexical Error', yy_.yylloc.first_line, yy_.yylloc.first_column, 'Unknown pattern: ' + yy_.yytext)); console.error('Lexical Error: ' + yy_.yytext + ' in the line ' + yy_.yylloc.first_line + ' and column ' + yy_.yylloc.first_column); idError++; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:((\/\*[\s\S]*?\*\/|\/\/.*)))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:out\b)/,/^(?:System\.out\.print\b)/,/^(?:System\.out\.println\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:switch\b)/,/^(?:System\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)))/,/^(?:(((([0-9]+))(\.(([0-9]+)))?)))/,/^(?:(((('))((?:\\(n|t|r|\\|"|\\')|(?:(?!(('))).))?)((')))))/,/^(?:(((("))((?:\\(("))|(?:(?!(("))).))*)((")))))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}