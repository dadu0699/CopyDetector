/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,12],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[2,8,12],$V9=[2,6,12],$Va=[2,6,12,15,19,25,26,27,28,29],$Vb=[1,33],$Vc=[1,34],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[15,19,25,26,27,28,29],$Vj=[10,30],$Vk=[2,56],$Vl=[1,56],$Vm=[1,63],$Vn=[1,70],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,78],$Vx=[1,81],$Vy=[1,80],$Vz=[1,83],$VA=[21,30],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[10,21,30,52,53,54,55,56,57,58,59,60,61,62,63,64,65,83],$VQ=[1,104],$VR=[1,120],$VS=[1,122],$VT=[1,123],$VU=[1,124],$VV=[1,125],$VW=[1,126],$VX=[1,127],$VY=[1,128],$VZ=[1,129],$V_=[1,130],$V$=[1,131],$V01=[1,132],$V11=[2,9,15,19,25,26,27,28,29,73,74,76,77,78,82,84,85,87,88,89,90,91],$V21=[2,9,15,25,26,27,28,29,73,74,76,78,82,84,85,87,88,89,90,91],$V31=[1,162],$V41=[1,166],$V51=[10,21,30,52,53,58,59,60,61,62,63,64,65,83],$V61=[10,21,30,52,53,54,55,57,58,59,60,61,62,63,64,65,83],$V71=[10,21,30,58,59,60,61,62,63,64,65,83],$V81=[10,21,30,62,63,64,65,83],$V91=[2,10,13],$Va1=[1,204],$Vb1=[1,203],$Vc1=[15,82,84],$Vd1=[1,233];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"IMPORTS":4,"CLASSES":5,"EOF":6,"IMPORT":7,"import":8,"identifier":9,";":10,"CLASS":11,"class":12,"{":13,"BODYCLASS":14,"}":15,"ERROR":16,"METHOD":17,"DECLARATION":18,"void":19,"(":20,")":21,"BODY":22,"TYPE":23,"PARAMS":24,"int":25,"double":26,"boolean":27,"char":28,"String":29,",":30,"PARAM":31,"SENTENCES":32,"SENTENCE":33,"ASSIGNMENT":34,"INVOKEMETHOD":35,"SOUT":36,"IF":37,"SWITCH":38,"FOR":39,"WHILE":40,"DOWHILE":41,"RETURN":42,"BREAK":43,"CONTINUE":44,"IDLIST":45,"ID":46,"ASSIGNMENT_EXPRESSION":47,"++":48,"--":49,"=":50,"EXPRESSION":51,"+":52,"-":53,"*":54,"/":55,"^":56,"%":57,"<":58,">":59,"<=":60,">=":61,"==":62,"!=":63,"||":64,"&&":65,"!":66,"stringLiteral":67,"character":68,"decimal":69,"true":70,"false":71,"INVOKEMETHODPARAMS":72,"print":73,"println":74,"CONDITION":75,"if":76,"else":77,"switch":78,"CASES":79,"DEFAULT":80,"CASE":81,"case":82,":":83,"default":84,"for":85,"ITERATOR":86,"while":87,"do":88,"return":89,"break":90,"continue":91,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"import",9:"identifier",10:";",12:"class",13:"{",15:"}",19:"void",20:"(",21:")",25:"int",26:"double",27:"boolean",28:"char",29:"String",30:",",48:"++",49:"--",50:"=",52:"+",53:"-",54:"*",55:"/",56:"^",57:"%",58:"<",59:">",60:"<=",61:">=",62:"==",63:"!=",64:"||",65:"&&",66:"!",67:"stringLiteral",68:"character",69:"decimal",70:"true",71:"false",73:"print",74:"println",76:"if",77:"else",78:"switch",82:"case",83:":",84:"default",85:"for",87:"while",88:"do",89:"return",90:"break",91:"continue"},
productions_: [0,[3,3],[3,2],[3,1],[3,1],[4,2],[4,1],[7,3],[7,2],[5,2],[5,1],[11,5],[11,4],[11,5],[11,4],[11,2],[14,2],[14,2],[14,1],[14,1],[14,2],[17,5],[17,5],[17,6],[17,6],[17,2],[23,1],[23,1],[23,1],[23,1],[23,1],[24,3],[24,1],[31,2],[31,1],[22,2],[22,3],[22,1],[32,2],[32,1],[33,1],[33,1],[33,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[18,3],[45,3],[45,1],[46,1],[46,2],[34,3],[34,3],[34,3],[47,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[35,3],[35,4],[72,3],[72,1],[36,4],[36,4],[36,3],[36,3],[75,3],[75,1],[37,3],[37,5],[37,5],[38,6],[38,5],[38,5],[38,4],[38,6],[79,2],[79,1],[81,3],[81,4],[81,2],[80,2],[80,3],[80,2],[39,11],[39,10],[39,2],[86,2],[86,2],[40,3],[41,5],[42,2],[42,3],[43,2],[44,2],[16,1],[16,1],[16,1],[16,1],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 if (errorList.length > 0) { let eL = []; eL = eL.concat(errorList); errorList = []; idError = 0; return { 'error': eL }; } return { 'imports': $$[$0-2], 'classes': $$[$0-1] } 
break;
case 2:
 if (errorList.length > 0) { let eL = []; eL = eL.concat(errorList); errorList = []; idError = 0; return { 'error': eL }; } return { 'classes': $$[$0-1] } 
break;
case 4: case 8: case 13: case 14: case 15: case 20: case 25: case 34: case 37: case 52: case 95: case 103: case 108: case 111: case 114:
 errorList.push(new Error(idError, 'Syntactic error', this._$.first_line, this._$.first_column, yytext + ' Was expected ' + yy.parser.hash.expected)); console.error('Syntactic error: ' + yytext + ' Was expected ' + yy.parser.hash.expected + ' in the line ' + this._$.first_line + ' and column ' + this._$.first_column); idError++; 
break;
case 5: case 9: case 16: case 17: case 38: case 104:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6: case 10: case 18: case 19: case 32: case 39: case 55: case 89: case 105:
 this.$ = [$$[$0]]; 
break;
case 7:
 this.$ = { 'import': $$[$0-1] }; 
break;
case 11:
 this.$ = { 'class_name': $$[$0-3], 'class_content': $$[$0-1] }; 
break;
case 12:
 this.$ = { 'class_name': $$[$0-2], 'class_content': [] }; 
break;
case 21:
 this.$ = {'method_name': $$[$0-3], 'type': $$[$0-4], 'method_params': [], 'method_content': $$[$0] }; if(returnSentence && returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Unexpected return value')); console.error('Syntactic error: Unexpected return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter>0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 22:
 this.$ = {'method_name': $$[$0-3], 'type': $$[$0-4], 'method_params': [], 'method_content': $$[$0] }; if(returnSentence && !returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Missing return value')); console.error('Syntactic error: Missing return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter> 0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 23:
 this.$ = {'method_name': $$[$0-4], 'type': $$[$0-5], 'method_params': $$[$0-2], 'method_content': $$[$0] }; if(returnSentence && returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Unexpected return value')); console.error('Syntactic error: Unexpected return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter>0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 24:
 this.$ = {'method_name': $$[$0-4], 'type': $$[$0-5], 'method_params': $$[$0-2], 'method_content': $$[$0] }; if(returnSentence && !returnExpression) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'Missing return value')); console.error('Syntactic error: Missing return value in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } returnSentence = false; if(breakCounter>0 || continueCounter>0) { errorList.push(new Error(idError, 'Syntactic error', errorLine, errorcolumn, 'No enclosing loop out of which to break or continue')); console.error('Syntactic error: No enclosing loop out of which to break or continue in the line ' + errorLine + ' and column ' + errorcolumn); idError++; } breakCounter = 0; continueCounter = 0; 
break;
case 26:
 this.$ = 'int'; 
break;
case 27:
 this.$ = 'double'; 
break;
case 28:
 this.$ = 'boolean'; 
break;
case 29:
 this.$ = 'char'; 
break;
case 30:
 this.$ = 'String'; 
break;
case 31: case 54: case 88:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 33:
 this.$ = { 'type': $$[$0-1], 'identifier' : $$[$0] }; 
break;
case 35:
 this.$ = []; 
break;
case 36: case 94:
 this.$ = $$[$0-1]; 
break;
case 40:
 this.$ = { 'declaration' : $$[$0] }; 
break;
case 41:
 this.$ = { 'assignment' : $$[$0] }; 
break;
case 42:
 this.$ = { 'method_invocation' : $$[$0-1] }; 
break;
case 43: case 44: case 61: case 79: case 80: case 81: case 82: case 83: case 84: case 85:
 this.$ = $$[$0]; 
break;
case 45:
 this.$ = { 'switch' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 46:
 this.$ = { 'for' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 47:
 this.$ = { 'while' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 48:
 this.$ = { 'do' : $$[$0] }; breakCounter--; continueCounter--; 
break;
case 49:
 this.$ = { 'return' : $$[$0] }; 
break;
case 50:
 this.$ = 'break'; 
break;
case 51:
 this.$ = 'continue'; 
break;
case 53:
 this.$ = { 'type' : $$[$0-2], identifiers: $$[$0-1] }; 
break;
case 56:
 this.$ = {'identifier': $$[$0] }; 
break;
case 57:
 this.$ = {'identifier': $$[$0-1], 'value' : $$[$0] }; 
break;
case 58:
 this.$ = {'identifier': $$[$0-2], 'value' : $$[$0-1] }; 
break;
case 59:
 this.$ = {'identifier': $$[$0-2], 'value' : $$[$0-2] + ' + 1' }; 
break;
case 60:
 this.$ = {'identifier': $$[$0-2], 'value' : $$[$0-2] + ' - 1' }; 
break;
case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 77: case 78:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 86:
 this.$ = { 'method_identifier' : $$[$0-2], 'params' : [] }; 
break;
case 87:
 this.$ = { 'method_identifier' : $$[$0-3], 'params' : $$[$0-1] }; 
break;
case 90:
 this.$ = { 'print' : [] }; 
break;
case 91:
 this.$ = { 'println' : [] }; 
break;
case 92:
 this.$ = { 'print' : $$[$0-1] }; 
break;
case 93:
 this.$ = { 'println' : $$[$0-1] }; 
break;
case 96:
 this.$ = { 'if' : { 'condition' : $$[$0-1], 'sentences' : $$[$0] } }; 
break;
case 97: case 98:
 this.$ = { 'if' : { 'condition' : $$[$0-3], 'sentences' : $$[$0-2] }, 'else': $$[$0] }; 
break;
case 99:
 this.$ = { 'condition' : $$[$0-4], 'case_sentences' : $$[$0-2], 'default': $$[$0-1] }; 
break;
case 100:
 this.$ = { 'condition' : $$[$0-3], 'case_sentences' : $$[$0-1] }; 
break;
case 101:
 this.$ = { 'condition' : $$[$0-3], 'default' : $$[$0-1] }; 
break;
case 102:
 this.$ = { 'condition' : $$[$0-2] }; 
break;
case 106:
 this.$ = { 'expression' : $$[$0-1], 'sentences' : [] }; 
break;
case 107:
 this.$ = { 'expression' : $$[$0-2], 'sentences' : $$[$0] }; 
break;
case 109:
 this.$ = { 'sentences' : [] }; 
break;
case 110:
 this.$ = { 'sentences' : $$[$0] }; 
break;
case 112:
 this.$ = { 'initializer' : { 'type' : $$[$0-8], identifier: $$[$0-7], 'value' : $$[$0-6] }, 'condition' : $$[$0-4], 'iterator' : $$[$0-2], 'sentences' : $$[$0] }; 
break;
case 113:
 this.$ = { 'initializer' : { identifier: $$[$0-7], 'value' : $$[$0-6] }, 'condition' : $$[$0-4], 'iterator' : $$[$0-3], 'sentences' : $$[$0] }; 
break;
case 115:
 this.$ = {'identifier': $$[$0-1], 'value' : $$[$0-1] + ' + 1' }; 
break;
case 116:
 this.$ = {'identifier': $$[$0-1], 'value' : $$[$0-1] + ' - 1' }; 
break;
case 117:
 this.$ = { 'condition' : $$[$0-1], 'sentences' : $$[$0] }; 
break;
case 118:
 this.$ = { 'sentences' : $$[$0-3], 'while' : $$[$0-1] }; 
break;
case 119:
 this.$ = ''; returnExpression = false; returnSentence = true; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
case 120:
 this.$ = $$[$0-1]; returnExpression = true; returnSentence = true; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
case 121:
 breakCounter++; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
case 122:
 continueCounter++; errorLine = this._$.first_line; errorcolumn = this._$.first_column; 
break;
}
},
table: [{2:[1,5],3:1,4:2,5:3,6:[1,4],7:6,8:$V0,11:7,12:$V1},{1:[3]},{2:$V2,5:10,7:11,8:$V0,11:7,12:$V1},{2:$V2,6:[1,13],11:14,12:$V1},{1:[2,3]},{1:[2,4],13:$V3,15:$V4,16:15,20:$V5,21:$V6,83:$V7},o($V8,[2,6]),o($V9,[2,10]),{2:[1,22],9:[1,21]},{2:[1,24],9:[1,23]},{2:$V2,6:[1,25],11:14,12:$V1},o($V8,[2,5]),{13:$V3,15:$V4,16:15,20:$V5,21:$V6,83:$V7},{1:[2,2]},o($V9,[2,9]),o($V9,[2,15]),o($Va,[2,123]),o($Va,[2,124]),o($Va,[2,125]),o($Va,[2,126]),o($Va,[2,127]),{10:[1,26]},o($V8,[2,8]),{13:[1,27]},{13:[1,28]},{1:[2,1]},o($V8,[2,7]),{2:$Vb,14:29,15:[1,30],17:31,18:32,19:$Vc,23:35,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh},{2:$Vb,14:41,15:[1,42],17:31,18:32,19:$Vc,23:35,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh},{15:[1,43],17:44,18:45,19:$Vc,23:35,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh},o($V9,[2,12]),o($Vi,[2,18]),o($Vi,[2,19]),{13:$V3,15:$V4,16:46,20:$V5,21:$V6,83:$V7},{2:[1,48],9:[1,47]},{9:[1,49],45:50,46:51},{9:[2,26]},{9:[2,27]},{9:[2,28]},{9:[2,29]},{9:[2,30]},{15:[1,52],17:44,18:45,19:$Vc,23:35,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh},o($V9,[2,14]),o($V9,[2,11]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,20]),{20:[1,53]},o($Vi,[2,25]),o($Vj,$Vk,{47:55,20:[1,54],50:$Vl}),{10:[1,57],30:[1,58]},o($Vj,[2,55]),o($V9,[2,13]),{2:$Vm,21:[1,59],23:62,24:60,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,31:61},{2:$Vm,21:[1,64],23:62,24:65,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,31:61},o($Vj,[2,57]),{9:$Vn,20:$Vo,35:76,51:66,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},o([2,9,15,19,25,26,27,28,29,73,74,76,78,82,84,85,87,88,89,90,91],[2,53]),{9:$Vw,46:77},{2:$Vx,13:$Vy,22:79},{21:[1,82],30:$Vz},o($VA,[2,32]),{9:[1,84]},o($VA,[2,34]),{2:$Vx,13:$Vy,22:85},{21:[1,86],30:$Vz},o($Vj,[2,61],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO}),{9:$Vn,20:$Vo,35:76,51:101,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:102,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:103,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},o($VP,[2,79],{20:$VQ}),o($VP,[2,80]),o($VP,[2,81]),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,85]),o($Vj,[2,54]),o($Vj,$Vk,{47:55,50:$Vl}),o($Vi,[2,21]),{2:$VR,9:$VS,15:[1,105],18:108,23:121,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,32:106,33:107,34:109,35:110,36:111,37:112,38:113,39:114,40:115,41:116,42:117,43:118,44:119,73:$VT,74:$VU,76:$VV,78:$VW,85:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01},o($V11,[2,37]),{2:$Vx,13:$Vy,22:133},{2:$Vm,23:62,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,31:134},o($VA,[2,33]),o($Vi,[2,22]),{2:$Vx,13:$Vy,22:135},{9:$Vn,20:$Vo,35:76,51:136,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:137,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:138,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:139,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:140,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:141,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:142,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:143,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:144,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:145,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:146,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:147,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:148,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{9:$Vn,20:$Vo,35:76,51:149,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{21:[1,150],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO},o($VP,[2,77]),o($VP,[2,78]),{9:$Vn,20:$Vo,21:[1,151],35:76,51:153,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:152},o($V11,[2,35]),{2:$VR,9:$VS,15:[1,154],18:108,23:121,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,33:155,34:109,35:110,36:111,37:112,38:113,39:114,40:115,41:116,42:117,43:118,44:119,73:$VT,74:$VU,76:$VV,78:$VW,85:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01},o($V21,[2,39]),o($V21,[2,40]),o($V21,[2,41]),{10:[1,156]},o($V21,[2,43]),o($V21,[2,44]),o($V21,[2,45]),o($V21,[2,46]),o($V21,[2,47]),o($V21,[2,48]),o($V21,[2,49]),o($V21,[2,50]),o($V21,[2,51]),o($V21,[2,52]),{9:$Vw,45:50,46:51},{20:$VQ,47:157,48:[1,158],49:[1,159],50:$Vl},{2:$V31,20:[1,160],75:161},{2:$V31,20:[1,163],75:164},{2:$V31,20:$V41,75:165},{2:$V31,20:$V41,75:167},{2:[1,169],20:[1,168]},{2:$V31,20:$V41,75:170},{2:$Vx,13:$Vy,22:171},{9:$Vn,10:[1,172],20:$Vo,35:76,51:173,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{10:[1,174]},{10:[1,175]},o($Vi,[2,23]),o($VA,[2,31]),o($Vi,[2,24]),o($V51,[2,62],{54:$VD,55:$VE,56:$VF,57:$VG}),o($V51,[2,63],{54:$VD,55:$VE,56:$VF,57:$VG}),o($V61,[2,64],{56:$VF}),o($V61,[2,65],{56:$VF}),o($VP,[2,66]),o($V61,[2,67],{56:$VF}),o($V71,[2,68],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG}),o($V71,[2,69],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG}),o($V71,[2,70],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG}),o($V71,[2,71],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG}),o($V81,[2,72],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($V81,[2,73],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o([10,21,30,64,83],[2,74],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,65:$VO}),o([10,21,30,64,65,83],[2,75],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o($VP,[2,76]),o($VP,[2,86]),{21:[1,176],30:[1,177]},o($VA,[2,89],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO}),o($V11,[2,36]),o($V21,[2,38]),o($V21,[2,42]),{10:[1,178]},{10:[1,179]},{10:[1,180]},{9:$Vn,20:$Vo,21:[1,181],35:76,51:182,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{10:[1,183]},o($V91,[2,95]),{9:$Vn,20:$Vo,21:[1,184],35:76,51:182,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{10:[1,185]},{2:$Vx,13:$Vy,22:186},{9:$Vn,20:$Vo,35:76,51:182,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{13:[1,187]},{9:[1,189],23:188,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh},o($V21,[2,114]),{2:$Vx,13:$Vy,22:190},{87:[1,191]},o($V21,[2,119]),{10:[1,192],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO},o($V21,[2,121]),o($V21,[2,122]),o($VP,[2,87]),{9:$Vn,20:$Vo,35:76,51:193,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},o($V21,[2,58]),o($V21,[2,59]),o($V21,[2,60]),{10:[1,194]},{21:[1,195],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO},o($V21,[2,92]),{10:[1,196]},o($V21,[2,93]),o($V21,[2,96],{77:[1,197]}),{2:[1,201],15:[1,200],79:198,80:199,81:202,82:$Va1,84:$Vb1},{9:[1,205]},{47:206,50:$Vl},o($V21,[2,117]),{2:$V31,20:$V41,75:207},o($V21,[2,120]),o($VA,[2,88],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO}),o($V21,[2,90]),o($V91,[2,94]),o($V21,[2,91]),{2:$Vx,13:$Vy,22:209,37:208,76:$VV},{15:[1,211],80:210,81:212,82:$Va1,84:$Vb1},{15:[1,213]},o($V21,[2,102]),{13:$V3,15:$V4,16:214,20:$V5,21:$V6,83:$V7},o($Vc1,[2,105]),{2:[1,216],83:[1,215]},{2:[1,218],9:$Vn,20:$Vo,35:76,51:217,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{47:219,50:$Vl},{10:[1,220]},{10:[1,221]},o($V21,[2,97]),o($V21,[2,98]),{15:[1,222]},o($V21,[2,100]),o($Vc1,[2,104]),o($V21,[2,101]),{15:[1,223]},{2:$VR,9:$VS,15:[2,109],18:108,23:121,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,32:224,33:107,34:109,35:110,36:111,37:112,38:113,39:114,40:115,41:116,42:117,43:118,44:119,73:$VT,74:$VU,76:$VV,78:$VW,85:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01},{15:[2,111]},{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,83:[1,225]},o($Vc1,[2,108]),{10:[1,226]},{9:$Vn,20:$Vo,35:76,51:227,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},o($V21,[2,118]),o($V21,[2,99]),o($V21,[2,103]),{2:$VR,9:$VS,15:[2,110],18:108,23:121,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,33:155,34:109,35:110,36:111,37:112,38:113,39:114,40:115,41:116,42:117,43:118,44:119,73:$VT,74:$VU,76:$VV,78:$VW,85:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01},o($Vc1,[2,106],{33:107,18:108,34:109,35:110,36:111,37:112,38:113,39:114,40:115,41:116,42:117,43:118,44:119,23:121,32:228,2:$VR,9:$VS,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,73:$VT,74:$VU,76:$VV,78:$VW,85:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01}),{9:$Vn,20:$Vo,35:76,51:229,53:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv},{10:[1,230],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO},o($Vc1,[2,107],{18:108,34:109,35:110,36:111,37:112,38:113,39:114,40:115,41:116,42:117,43:118,44:119,23:121,33:155,2:$VR,9:$VS,25:$Vd,26:$Ve,27:$Vf,28:$Vg,29:$Vh,73:$VT,74:$VU,76:$VV,78:$VW,85:$VX,87:$VY,88:$VZ,89:$V_,90:$V$,91:$V01}),{10:[1,231],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO},{9:$Vd1,86:232},{9:$Vd1,86:234},{21:[1,235]},{48:[1,236],49:[1,237]},{21:[1,238]},{2:$Vx,13:$Vy,22:239},{21:[2,115]},{21:[2,116]},{2:$Vx,13:$Vy,22:240},o($V21,[2,113]),o($V21,[2,112])],
defaultActions: {4:[2,3],13:[2,2],25:[2,1],36:[2,26],37:[2,27],38:[2,28],39:[2,29],40:[2,30],216:[2,111],236:[2,115],237:[2,116]},
    parseError: function parseError(str, hash) {
        this.hash = hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Error } = require('../models/Error');

    var idError = 1;
    var errorLine = 0;
    var errorcolumn = 0;
    var errorList = [];

    var returnExpression = false;
    var returnSentence = false;

    var breakCounter = 0;
    var continueCounter = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip Single Line Comment AND Multiline Comment */
break;
case 2:return 13
break;
case 3:return 15
break;
case 4:return 20
break;
case 5:return 21
break;
case 6:return 30
break;
case 7:return '.'
break;
case 8:return 83
break;
case 9:return 10
break;
case 10:return 27
break;
case 11:return 90
break;
case 12:return 82
break;
case 13:return 28
break;
case 14:return 12
break;
case 15:return 91
break;
case 16:return 84
break;
case 17:return 88
break;
case 18:return 26
break;
case 19:return 77
break;
case 20:return 71
break;
case 21:return 85
break;
case 22:return 76
break;
case 23:return 8
break;
case 24:return 25
break;
case 25:return 'out'
break;
case 26:return 73
break;
case 27:return 74
break;
case 28:return 89
break;
case 29:return 29
break;
case 30:return 78
break;
case 31:return 'System'
break;
case 32:return 70
break;
case 33:return 19
break;
case 34:return 87
break;
case 35:return 60
break;
case 36:return 58
break;
case 37:return 62
break;
case 38:return 61
break;
case 39:return 59
break;
case 40:return 63
break;
case 41:return 64
break;
case 42:return 65
break;
case 43:return 66
break;
case 44:return 50
break;
case 45:return 48
break;
case 46:return 52
break;
case 47:return 49
break;
case 48:return 53
break;
case 49:return 54
break;
case 50:return 55
break;
case 51:return 56
break;
case 52:return 57
break;
case 53:return 9
break;
case 54:return 69
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 57:return 6;
break;
case 58: errorList.push(new Error(idError, 'Lexical Error', yy_.yylloc.first_line, yy_.yylloc.first_column, 'Unknown pattern: ' + yy_.yytext)); console.error('Lexical Error: ' + yy_.yytext + ' in the line ' + yy_.yylloc.first_line + ' and column ' + yy_.yylloc.first_column); idError++; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:((\/\*[\s\S]*?\*\/|\/\/.*)))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:out\b)/,/^(?:System\.out\.print\b)/,/^(?:System\.out\.println\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:switch\b)/,/^(?:System\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)))/,/^(?:(((([0-9]+))(\.(([0-9]+)))?)))/,/^(?:(((('))((?:\\(n|t|r|\\|"|\\')|(?:(?!(('))).))?)((')))))/,/^(?:(((("))((?:\\(("))|(?:(?!(("))).))*)((")))))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}